import pandas as pd
import networkx as nx
from sklearn.neighbors import KNeighborsRegressor
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

# Load data
data = pd.read_csv("data.csv")
X = data[['latitude', 'longitude']]
y = data['delivery_time']

# Train the model
model = KNeighborsRegressor(n_neighbors=5)
model.fit(X, y)

# Get the estimated delivery time for each node
delivery_times = model.predict(X)

# Build the graph using NetworkX
G = nx.Graph()
for i, row in data.iterrows():
    G.add_node(i, pos=(row['latitude'], row['longitude']), demand=row['demand'])

# Add edges between all nodes with Euclidean distance as the weight
for i, node1 in enumerate(G.nodes()):
    for j, node2 in enumerate(G.nodes()):
        if i < j:
            pos1 = G.nodes[node1]['pos']
            pos2 = G.nodes[node2]['pos']
            weight = np.linalg.norm(np.array(pos1) - np.array(pos2))
            G.add_edge(node1, node2, weight=weight)

# Solve the vehicle routing problem
routing = pywrapcp.RoutingModel(len(G), 1, 0)
search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()
search_parameters.first_solution_strategy = (routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

# Set the cost function using the estimated delivery time for each node
for i, node in enumerate(G.nodes()):
    routing.SetArcCostEvaluatorOfVehicle(i, model.predict([[G.nodes[node]['pos']]])[0])

# Get the optimal route
assignment = routing.SolveWithParameters(search_parameters)
if assignment:
    route = []
    node = routing.Start(0)
    while not routing.IsEnd(node):
        route.append(node)
        node = assignment.Value(routing.NextVar(node))
    route.append(routing.End(0))
    print("Optimal Route:", route)
